"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[871],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),l=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(r),m=n,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return r?a.createElement(g,o(o({ref:t},c),{},{components:r})):a.createElement(g,o({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[u]="string"==typeof e?e:n,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3542:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={},o="Sample Applications",p={unversionedId:"building-applications/sample-applications",id:"building-applications/sample-applications",title:"Sample Applications",description:"Explore these GitHub repositories to see examples of Groundlight-powered applications:",source:"@site/docs/building-applications/1-sample-applications.md",sourceDirName:"building-applications",slug:"/building-applications/sample-applications",permalink:"/python-sdk/docs/building-applications/sample-applications",draft:!1,editUrl:"https://github.com/groundlight/python-sdk/tree/main/docs/docs/building-applications/1-sample-applications.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Building Applications",permalink:"/python-sdk/docs/building-applications/"},next:{title:"Grabbing Images",permalink:"/python-sdk/docs/building-applications/grabbing-images"}},s={},l=[{value:"Groundlight Stream Processor",id:"groundlight-stream-processor",level:2},{value:"Arduino ESP32 Camera Sample App",id:"arduino-esp32-camera-sample-app",level:2},{value:"Raspberry Pi",id:"raspberry-pi",level:2},{value:"Industrial and Manufacturing Applications",id:"industrial-and-manufacturing-applications",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"sample-applications"},"Sample Applications"),(0,n.kt)("p",null,"Explore these GitHub repositories to see examples of Groundlight-powered applications:"),(0,n.kt)("h2",{id:"groundlight-stream-processor"},"Groundlight Stream Processor"),(0,n.kt)("p",null,"Repository: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/groundlight/stream"},"https://github.com/groundlight/stream")),(0,n.kt)("p",null,"The Groundlight Stream Processor is an easy-to-use Docker container for analyzing RTSP streams or common USB-based cameras. You can run it with a single Docker command, such as:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"docker run stream:local --help\n")),(0,n.kt)("h2",{id:"arduino-esp32-camera-sample-app"},"Arduino ESP32 Camera Sample App"),(0,n.kt)("p",null,"Repository: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/groundlight/esp32cam"},"https://github.com/groundlight/esp32cam")),(0,n.kt)("p",null,"This sample application allows you to build a working AI vision detector using an inexpensive WiFi camera. With a cost of under $10, you can create a powerful and affordable AI vision system."),(0,n.kt)("h2",{id:"raspberry-pi"},"Raspberry Pi"),(0,n.kt)("p",null,"Repository: ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/groundlight/raspberry-pi-door-lock"},"https://github.com/groundlight/raspberry-pi-door-lock")),(0,n.kt)("p",null,"This sample application demonstrates how to set up a Raspberry Pi-based door lock system. The application monitors a door and sends a notification if the door is observed to be unlocked during non-standard business hours."),(0,n.kt)("h2",{id:"industrial-and-manufacturing-applications"},"Industrial and Manufacturing Applications"),(0,n.kt)("p",null,"Groundlight can be used to ",(0,n.kt)("a",{parentName:"p",href:"/docs/building-applications/industrial"},"apply modern natural-language-based computer vision to industrial and manufacturing applications"),"."))}d.isMDXComponent=!0}}]);