"use strict";(self.webpackChunkcode_groundlight_ai=self.webpackChunkcode_groundlight_ai||[]).push([[2111],{3235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"sample-applications/retail-analytics","title":"A Serious Example: Retail Analytics","description":"Tracking utilization of a customer service counter","source":"@site/docs/sample-applications/2-retail-analytics.md","sourceDirName":"sample-applications","slug":"/sample-applications/retail-analytics","permalink":"/python-sdk/docs/sample-applications/retail-analytics","draft":false,"unlisted":false,"editUrl":"https://github.com/groundlight/python-sdk/tree/main/docs/docs/sample-applications/2-retail-analytics.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"A Fun Example: Dog-on-Couch Detector","permalink":"/python-sdk/docs/sample-applications/dog-on-couch"},"next":{"title":"A Quick Example: Live Stream Monitor","permalink":"/python-sdk/docs/sample-applications/streaming-with-alerts"}}');var r=t(4848),a=t(8453);const s={},o="A Serious Example: Retail Analytics",l={},c=[{value:"Tracking utilization of a customer service counter",id:"tracking-utilization-of-a-customer-service-counter",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Creating the Application",id:"creating-the-application",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"a-serious-example-retail-analytics",children:"A Serious Example: Retail Analytics"})}),"\n",(0,r.jsx)(n.h2,{id:"tracking-utilization-of-a-customer-service-counter",children:"Tracking utilization of a customer service counter"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates the application of Groundlight to a retail analytics solution, which monitors the usage of a service counter by customers throughout the day. The application creates a detector to identify when the service desk is being utilized by a customer. It checks the detector every minute, and once an hour, it prints out a summary of the percentage of time that the service counter is in use. At the end of the day, it emails the daily log."}),"\n",(0,r.jsx)(n.p,{children:"This retail analytics application can be beneficial in various ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Staff allocation and scheduling:"})," By analyzing the usage patterns of the service counter, store managers can optimize staff allocation and scheduling, ensuring that enough employees are available during peak hours and reducing wait times for customers."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Identifying trends:"})," The application can help identify trends in customer behavior, such as busier times of the day or specific days of the week with higher traffic. This information can be used to plan targeted marketing campaigns or promotions to increase sales and customer engagement."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Improving store layout:"})," Understanding when and how often customers use the service counter can provide insights into the effectiveness of the store's layout. Retailers can use this information to make data-driven decisions about rearranging the store layout to encourage customers to visit the service counter or explore other areas of the store."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Customer satisfaction:"})," By monitoring the usage of the service counter and proactively addressing long wait times or crowded areas, retailers can improve customer satisfaction and loyalty. A positive customer experience can lead to increased sales and return visits."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To implement this retail analytics solution, a store would need to install a supported camera near the service counter, ensuring a clear view of the area. The camera would then be connected to a computer running the Groundlight-based application. Store managers would receive hourly summaries of the service counter usage and a daily log via email, enabling them to make informed decisions to improve store operations and customer experience."}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/docs/installation/",children:"Groundlight SDK"})," with Python 3.9 or higher"]}),"\n",(0,r.jsx)(n.li,{children:"A supported USB or network-connected camera"}),"\n",(0,r.jsx)(n.li,{children:"An email account with SMTP access to send the daily log"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"Ensure you have Python 3.9 or higher installed, and then install the Groundlight SDK, OpenCV library, and other required libraries:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install groundlight opencv-python pillow\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-the-application",children:"Creating the Application"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["First, log in to the ",(0,r.jsx)(n.a,{href:"https://dashboard.groundlight.ai",children:"Groundlight dashboard"})," and create an ",(0,r.jsx)(n.a,{href:"https://dashboard.groundlight.ai/reef/my-account/api-tokens",children:"API Token"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Next, we'll write the Python script for the application. Import the required libraries:"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"notest",children:"import smtplib\nimport time\nfrom datetime import datetime, timedelta\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nimport cv2\nfrom PIL import Image\n\nfrom groundlight import Groundlight\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Define a function to capture an image from the camera using OpenCV:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def capture_image():\n    cap = cv2.VideoCapture(0)\n\n    ret, frame = cap.read()\n    cap.release()\n\n    if ret:\n        # Convert to PIL image\n        return Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n    else:\n        return None\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Define a function to send the daily log via email.  You will need to customize this for your particular network environment."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def send_email(sender, receiver, subject, body):\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = receiver\n    msg['Subject'] = subject\n    msg.attach(MIMEText(body, 'plain'))\n\n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    server.login(sender, \"your-password\")\n    text = msg.as_string()\n    server.sendmail(sender, receiver, text)\n    server.quit()\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Define when your business's operating hours are:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"notest",children:"START_OF_BUSINESS = 9  # e.g. 9am\nEND_OF_BUSINESS = 17  # e.g. 5pm\n\ndef is_within_business_hours():\n    current_hour = datetime.now().hour\n    return START_OF_BUSINESS <= current_hour < END_OF_BUSINESS\n\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Write the main application loop:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:"notest",children:'gl = Groundlight()\n\ndetector = gl.get_or_create_detector(\n                name="counter-in-use",\n                query="Is there a customer at the service counter?",\n                # We can get away with relatively low confidence since we\'re aggregating across images\n                confidence_threshold=0.8)\n\nDELAY = 60\n\nlog = []\ndaily_log = []\nnext_hourly_start = datetime.now().replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)\n\nwhile True:\n    if not is_within_business_hours():\n        time.sleep(DELAY)\n        continue\n\n    image = capture_image()\n    if not image:\n        print("Failed to capture image")\n        time.sleep(DELAY)\n        continue\n\n    try:\n        iq = gl.submit_image_query(image=image, detector=detector, wait=60)\n    except Exception as e:\n        print(f"Error submitting image query: {e}")\n        time.sleep(DELAY)\n        continue\n\n    answer = iq.result.label\n    log.append(answer)\n\n    if datetime.now() >= next_hourly_start:\n        next_hourly_start += timedelta(hours=1)\n\n        percent_in_use = (log.count("YES") / len(log)) * 100\n        current_time = datetime.now().replace(hour=START_OF_BUSINESS, minute=0, second=0)\n        formatted_time = current_time.strftime("%I%p")  # like 3pm\n        msg = f"Hourly summary for {formatted_time}: {percent_in_use:.0f}% counter in use"\n        print(msg)\n        daily_log.append(msg)\n        log = []\n\n    current_hour = datetime.now().hour\n    if current_hour == END_OF_BUSINESS and not daily_log == []:\n        daily_summary = "Daily summary:\\n"\n        for msg in daily_log:\n            daily_summary += f"{msg}\\n"\n\n        print(daily_summary)\n        send_email(sender="counterbot@example.com",\n           receiver="manager@example.com",\n           subject="Daily Service Counter Usage Log",\n           body=daily_summary)\n        daily_log = []\n\n    time.sleep(DELAY)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This application captures an image using the ",(0,r.jsx)(n.code,{children:"capture_image"})," function, then submits it to the Groundlight API for analysis. If a customer is detected at the counter, it logs the event. Every hour, it prints a summary of the counter's usage percentage, and at the end of the day, it emails the daily log using the ",(0,r.jsx)(n.code,{children:"send_email"})," function."]}),"\n",(0,r.jsxs)(n.p,{children:["Save the entire script as ",(0,r.jsx)(n.code,{children:"service_counter_monitor.py"})," and run it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python service_counter_monitor.py\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);